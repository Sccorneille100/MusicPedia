[{"C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\index.js":"1","C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\app.js":"2","C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\serviceWorker.js":"3","C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\components\\Login.js":"4","C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\components\\Register.js":"5","C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\utils\\mutations.js":"6","C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\utils\\API.js":"7","C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\utils\\auth.js":"8"},{"size":503,"mtime":1693448940001,"results":"9","hashOfConfig":"10"},{"size":3864,"mtime":1693522652727,"results":"11","hashOfConfig":"10"},{"size":5343,"mtime":1693459015148,"results":"12","hashOfConfig":"10"},{"size":2657,"mtime":1693460149326,"results":"13","hashOfConfig":"10"},{"size":3513,"mtime":1693522652728,"results":"14","hashOfConfig":"10"},{"size":941,"mtime":1693455056956,"results":"15","hashOfConfig":"10"},{"size":1504,"mtime":1693522652729,"results":"16","hashOfConfig":"10"},{"size":1234,"mtime":1693522652729,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1hh2paw",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\index.js",[],["37","38"],"C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\app.js",[],"C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\serviceWorker.js",[],"C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\components\\Login.js",[],"C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\components\\Register.js",["39"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const response = await addUser({\n        variables: {...userFormData}\n      });\n\n      // if (!response.ok) {\n      //   throw new Error('something went wrong!');\n      // }\n\n      //const { token, user } = await response.json();\n      console.log(response.data.addUser.token);\n      Auth.login(response.data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group className='mb-3'>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className='mb-3'>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className='mb-3'>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\utils\\mutations.js",[],"C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\utils\\API.js",[],"C:\\Users\\steph\\Bootcamp\\Music-Library\\client\\src\\utils\\auth.js",["40"],"// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":17,"column":21,"nodeType":"47","messageId":"48","endLine":17,"endColumn":26},{"ruleId":"49","severity":1,"message":"50","line":49,"column":1,"nodeType":"51","endLine":49,"endColumn":34},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]